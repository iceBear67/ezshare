import java.time.Instant

plugins {
    id 'java'
    id "io.vertx.vertx-plugin" version "1.3.0"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'java-library'
    id 'org.graalvm.buildtools.native' version '0.9.14'
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
    id("com.palantir.graal") version "0.4.0" // regular plugin import
}

group 'io.ib67'
version '0.2'

repositories {
    mavenCentral()
}
vertx {
    mainVerticle = "io.ib67.ezshare.EzShareBoot"
    vertxVersion = "4.3.3"
}
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
    implementation 'com.h2database:h2:2.1.212'
   // implementation 'org.xerial:sqlite-jdbc:3.39.3.0'
    compileOnly 'org.jetbrains:annotations:23.0.0'
    implementation 'io.vertx:vertx-web:4.3.3'
    implementation 'io.vertx:vertx-jdbc-client:4.3.3'
    implementation 'io.vertx:vertx-reactive-streams:4.3.3'
    implementation 'com.typesafe:config:1.4.2'
    implementation 'org.slf4j:slf4j-simple:2.0.3'
    implementation 'org.slf4j:slf4j-api:2.0.3'

}


test {
    useJUnitPlatform()
}
/*
  Java
 */
def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}
/*
  Lombok
 */
lombok {
    version = "1.18.24"
}

/*
 Misc: Some stuff for build info generation
 */

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 7
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

def buildDate = Instant.now().toString()
def buildBy = System.getProperty("user.name")
def commitHash = getCheckedOutGitCommitHash()
processResources {
    def props = [
            version   : version,
            buildTime : buildDate,
            buildBy   : (buildBy.equals("runner") || buildBy.equals("icybear")) ? buildBy : "Unknown / $buildBy",
            commitHash: commitHash
    ]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('*') {
        expand props
    }
}